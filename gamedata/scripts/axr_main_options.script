-- Extensions to Game Options


--- IMPORTANT! SEE opt_menu_on_init to add a new game options (new as of 5/28/2016)

function opt_menu_on_init(menu)
	-- simply add new line and a ui_mm_<name> in ui_st_mm.xml to create a new option. Script automatically does the rest for you
	-- debug_hud
	
	if (DEV_DEBUG_DEV) then
		menu.gameplay_options["debug_hud"]			= {default=false, 	debug_only=true, 	typ="check", on_accept=function(handler,optMgr,ctrl)
			if (level.present() and xrs_debug_tools) then
				if (ctrl:GetCheck()) then
					xrs_debug_tools.activate_feature()
				else 
					xrs_debug_tools.deactivate_feature()
				end
			end
		end}
		
		-- show_enemy_health
		menu.gameplay_options["show_enemy_health"]	= {default=false, 	debug_only=true, 	typ="check"}
		
	
		menu.gameplay_options["extra_animations"]	= {default=true, 	debug_only=false, 	typ="check"}
	end
	-- localization
	menu.gameplay_options["localization"] = {default="eng", debug_only=false, typ="list", list={"rus","eng","spa"}, on_accept=function(handler,optMgr,ctrl)
		local language = ctrl:GetText()
		if (language and language ~= "") then
			local loc_ini = ini_file_ex("localization.ltx",true)
			if (loc_ini:r_value("string_table","language") ~= language) then
				loc_ini:w_value("string_table","language",language)
				loc_ini:save()
				menu.b__require_restart = true
			end
		end
	end}
	
	-- slot Hud
	--[[
	if (slot_hud) then
		menu.gameplay_options["slot_hud"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
			if (level.present() and slot_hud) then
				if (ctrl:GetCheck()) then
					slot_hud.activate_hud()
				else
					slot_hud.deactivate_hud()
				end
			end
		end}
	end
	--]]
	
	menu.gameplay_options["offline_battles"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- release dropped items 
	menu.gameplay_options["release_dropped_items"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- radio_mod
	menu.gameplay_options["radio_mod"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- mechanic_feature
	menu.gameplay_options["mechanic_feature"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_engine_sound
	menu.gameplay_options["heli_engine_sound"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_spawn
	menu.gameplay_options["heli_spawn"]			= {default=true, 	debug_only=false, 	typ="check"}
		
	menu.gameplay_options["use_battery"]		= {default=true, 	debug_only=false, 	typ="check"}
	
	menu.gameplay_options["mask_hud"]			= {default=true, 	debug_only=false, 	typ="check"}
	
	menu.gameplay_options["letterbox"]			= {default=false, 	debug_only=false, 	typ="check"}
	
	menu.gameplay_options["photomode"]			= {default=false, 	debug_only=false, 	typ="check"}
	
	menu.gameplay_options["only_campfire"]		= {default=false, 	debug_only=false, 	typ="check"}
	
	-- dynamic_news
	menu.gameplay_options["dynamic_news"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and dynamic_news_manager) then 
			if (ctrl:GetCheck()) then 
				dynamic_news_manager.get_dynamic_news()
			else
				dynamic_news_manager.destroy_dynamic_news()
			end
		end	
	end}
	-- sleep_deprived
	menu.gameplay_options["sleep_deprived"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and sleep_dep) then
			if (ctrl:GetCheck()) then
				sleep_dep.activate_feature()
			else 
				sleep_dep.deactivate_feature()
			end
		end
	end}
	
	-- I do not recommend allowing a factor greater than 1.5 because there are not enough smart terrain jobs
	menu.gameplay_options["alife_mutant_pop"]			= {default=1.00, 	debug_only=true, 	typ="list", list={0.50,1.00,1.50,2.00}}
	menu.gameplay_options["alife_stalker_pop"]			= {default=1.00, 	debug_only=true, 	typ="list", list={0.25,0.50,0.75,1.00}}
	
	-- excl_dist
	-- note: shouldn't be greater than switch distance or no simulation squads will come online. Instead it should create a border zone between excl_dist and switch_distance where stuff can come online
	-- so that when actor walks stuff will naturally come online but if squad teleports very close to actor it will stay offline until player walks far enough away.
	--menu.gameplay_options["excl_dist"]			= {default=75, 		debug_only=true, 	typ="list", list={0,25,50,75,100}}  
	
	-- quicksave_cnt
	menu.gameplay_options["quicksave_cnt"]		= {default=5, 		debug_only=false, 	typ="list", list={1,3,5,10}}
	
	if (db.actor) then -- Options will only show while in-game
	
		local l = get_character_icon_list()
		local selected = nil 

	end
	
    -- axr option default config
    local need_save

    for k,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				if not (axr_main.config:line_exist("mm_options","enable_"..k)) then
					axr_main.config:w_value("mm_options","enable_"..k,v.default)
					need_save = true
				end
			elseif not (axr_main.config:line_exist("mm_options",k)) then
				axr_main.config:w_value("mm_options",k,v.default)
				need_save = true
			end
		end
    end
 
    if (need_save) then
        axr_main.config:save()
    end
end

function opt_menu_on_accept(menu,optMgr,console)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				axr_main.config:w_value("mm_options","enable_"..name,v.ctrl:GetCheck())
			elseif (v.typ=="list") then 
				if (type(v.default) == "boolean") then
					axr_main.config:w_value("mm_options",name,v.ctrl:GetText()=="true" or false)
				elseif (type(v.default) == "number") then 
					axr_main.config:w_value("mm_options",name,tonumber(v.ctrl:GetText()) or v.default)
				else 
					axr_main.config:w_value("mm_options",name,v.ctrl:GetText())
				end
			end
			
			if (v.on_accept) then 
				v.on_accept(menu,optMgr,v.ctrl)
			end
		end
    end
    axr_main.config:save()
end

function opt_menu_on_set_values(menu,optMgr)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				v.ctrl:SetCheck(axr_main.config:r_value("mm_options","enable_"..name,1,v.default))
			elseif (v.typ=="list") then
				-- so proper type is cached when reading
				if (type(v.default) == "boolean") then
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,1,v.default))
				elseif (type(v.default) == "number") then 
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,2,v.default))
				else 
					v.ctrl:SetText(axr_main.config:r_value("mm_options",name,0,v.default))
				end
			end
			if (v.on_set_values) then 
				v.on_set_values(menu,optMgr,v.ctrl)
			end
		end
    end
end

function get_character_icon_list()
	local t = {"ui_inGame2_neutral_1"}
	local faction = character_community(db.actor):sub(7)
	local ini = ini_file("plugins\\faction_portraits.ltx")
	local section = faction.."_portraits"
	local n = ini:section_exist(section) and ini:line_count(section) or 0
	for i=0, n-1 do
		local result, id, value = ini:r_line(section,i,"","" )
		table.insert(t,id)
	end

	return t
end